{"version":3,"sources":["info/WalkschoolInfo.js","info/SoccerInfo.js","info/SchoolmealInfo.js","info/MoriningCheckInfo.js","info/StartingdayInfo.js","App.js","serviceWorker.js","index.js"],"names":["WalkschoolInfo","walkday","walkkm","Number","date1","Date","date2","count","temp_date","getTime","console","log","tmp","getDay","setDate","getDate","calcDate","class","className","SoccerInfo","soccerday","_date1","_date2","diffDate_1","diffDate_2","getFullYear","getMonth","diff","Math","abs","ceil","dateDiff","SchoolmealInfo","exception_weekendDay","MoriningCheck","f_exception_weekendDay","StartingDayInfo","currentDay","App","state","isLoading","setTimeout","setState","this","id","type","maxlength","data-text","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ddf69d73.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/neumorphDes.scss';\r\n\r\nfunction WalkschoolInfo(walkday){\r\n    walkday = Number(calcDate());\r\n    //1.28km\r\n    var walkkm = walkday * 1.28;\r\n    return(\r\n        <div class=\"row\">\r\n              <div class=\"card-w col-md-4\">\r\n              <div class=\"card active\">\r\n              <div class=\"card__icon\">\r\n   \r\n              </div>\r\n              <div class=\"card__text\">\r\n                  <div className=\"walkinfo\">\r\n                      <span className=\"infotext\">지금까지 최소 </span> \r\n                      <span className=\"infonumtext\">{walkkm}km </span> \r\n                      <span className=\"infotext\">만큼은 걷거나 차를 탈 수 있습니다.</span>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nfunction calcDate() {\r\n    var date1 = new Date(2020, 3, 2); // 개학일\r\n    var date2 = new Date(); // 현재 날짜\r\n\r\n    var count = 0;\r\n    \r\n        while(true) {  \r\n            var temp_date = date1;\r\n        \r\n            if(temp_date.getTime() > date2.getTime()) {\r\n                console.log(\"count : \" + count);\r\n                break;\r\n            } else {\r\n                var tmp = temp_date.getDay();\r\n                if(tmp === 0 || tmp === 6) {\r\n                    // 주말\r\n                    //console.log(\"주말\");\r\n            } else {\r\n                // 평일\r\n                //console.log(\"평일\");\r\n                count++;         \r\n            }\r\n            temp_date.setDate(date1.getDate() + 1); \r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport default WalkschoolInfo;","import React from 'react';\r\n\r\nfunction SoccerInfo({soccerday}){\r\n    var a = '2020-03-02';\r\n    var t_soccerday = Number(dateDiff(a, new Date()));\r\n    soccerday = t_soccerday*16; //하루 1440분을 축구 90분으로 나누어 계산한 결과 값이 16\r\n    return(\r\n        <div class=\"row\">\r\n        <div class=\"card-w col-md-4\">\r\n        <div class=\"card active\">\r\n        <div class=\"card__icon\">\r\n            \r\n        </div>\r\n        <div className=\"soccerinfo\">\r\n            <span className=\"infotext\">축구를 약 </span>\r\n            <span className=\"infonumtext\">{soccerday}</span>\r\n            <span className=\"infotext\">번 할 수 있습니다.</span>\r\n            <br></br>\r\n            <span className=\"destext\">하루 24간 종일 90분 축구를 한다는 가정하입니다...</span>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>      \r\n    );\r\n}\r\n\r\nfunction dateDiff(_date1, _date2) { /*날짜 간의 차이를 구하기 위한 함수*/\r\n    var diffDate_1 = _date1 instanceof Date ? _date1 :new Date(_date1); \r\n    var diffDate_2 = _date2 instanceof Date ? _date2 :new Date(_date2);\r\n \r\n    diffDate_1 =new Date(diffDate_1.getFullYear(), diffDate_1.getMonth()+1, diffDate_1.getDate());\r\n    diffDate_2 =new Date(diffDate_2.getFullYear(), diffDate_2.getMonth()+1, diffDate_2.getDate());\r\n \r\n    var diff = Math.abs(diffDate_2.getTime() - diffDate_1.getTime());\r\n    diff = Math.ceil(diff / (1000 * 3600 * 24)); //밀리초 단위 변환\r\n \r\n    return diff;\r\n}\r\n\r\nexport default SoccerInfo;","import React from 'react';\r\n\r\n\r\nfunction SchoolmealInfo(exception_weekendDay){\r\n    exception_weekendDay = calcDate();\r\n    return(\r\n    <div class=\"row\">\r\n        <div class=\"card-w col-md-4\">\r\n        <div class=\"card active\">\r\n        <div class=\"card__icon\">\r\n\r\n        </div>\r\n        <div className=\"mealinfo\">\r\n            <span class=\"infotext\">급식을 </span>\r\n            <span className=\"infonumtext\">{exception_weekendDay}</span>\r\n            <span className=\"infotext\">번 먹을 수 있습니다.</span>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n        \r\n    );\r\n}\r\n\r\n\r\nfunction calcDate() {\r\n    var date1 = new Date(2020, 3, 2); // 개학일\r\n    var date2 = new Date(); // 현재 날짜\r\n\r\n    var count = 0;\r\n    \r\n        while(true) {  \r\n            var temp_date = date1;\r\n        \r\n            if(temp_date.getTime() > date2.getTime()) {\r\n                console.log(\"count : \" + count);\r\n                break;\r\n            } else {\r\n                var tmp = temp_date.getDay();\r\n                if(tmp === 0 || tmp === 6) {\r\n                    // 주말\r\n                    //console.log(\"주말\");\r\n            } else {\r\n                // 평일\r\n                //console.log(\"평일\");\r\n                count++;         \r\n            }\r\n            temp_date.setDate(date1.getDate() + 1); \r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport default SchoolmealInfo;\r\n","import React from 'react';\r\n\r\nfunction MoriningCheck(exception_weekendDay){\r\n    exception_weekendDay = Number(calcDate());\r\n    var f_exception_weekendDay = exception_weekendDay*2\r\n    return(\r\n    <div class=\"row\">\r\n        <div class=\"card-w col-md-4\">\r\n        <div class=\"card active\">\r\n        <div class=\"card__icon\">\r\n\r\n        </div>\r\n        <div className=\"schoolcheckinfo\">\r\n            <span className=\"infotext\">조례 및 종례를 </span>\r\n            <span className=\"infonumtext\">{f_exception_weekendDay}</span>\r\n            <span className=\"infotext\">번 할 수 있습니다.</span>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction calcDate() {\r\n    var date1 = new Date(2020, 3, 2); // 개학일\r\n    var date2 = new Date(); // 현재 날짜\r\n\r\n    var count = 0;\r\n    \r\n        while(true) {  \r\n            var temp_date = date1;\r\n        \r\n            if(temp_date.getTime() > date2.getTime()) {\r\n                console.log(\"count : \" + count);\r\n                break;\r\n            } else {\r\n                var tmp = temp_date.getDay();\r\n                if(tmp === 0 || tmp === 6) {\r\n                    // 주말\r\n                    //console.log(\"주말\");\r\n            } else {\r\n                // 평일\r\n                //console.log(\"평일\");\r\n                count++;         \r\n            }\r\n            temp_date.setDate(date1.getDate() + 1); \r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport default MoriningCheck;","import React from 'react';\r\nimport './css/neumorphDes.scss';\r\n\r\nfunction StartingDayInfo({currentDay}){\r\n    var a = '2020-03-02';\r\n    currentDay = dateDiff(a, new Date());\r\n    return(\r\n        <div className=\"startingday segment innertext\">\r\n            <h2>우리는 3월 2일로 부터 {currentDay}일 만큼 지나왔습니다. </h2>\r\n            <br></br>\r\n            <h3>이정도 시간을 아래처럼 사용했다면...</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction dateDiff(_date1, _date2) { /*날짜 간의 차이를 구하기 위한 함수*/\r\n    var diffDate_1 = _date1 instanceof Date ? _date1 :new Date(_date1); \r\n    var diffDate_2 = _date2 instanceof Date ? _date2 :new Date(_date2);\r\n \r\n    diffDate_1 =new Date(diffDate_1.getFullYear(), diffDate_1.getMonth()+1, diffDate_1.getDate());\r\n    diffDate_2 =new Date(diffDate_2.getFullYear(), diffDate_2.getMonth()+1, diffDate_2.getDate());\r\n \r\n    var diff = Math.abs(diffDate_2.getTime() - diffDate_1.getTime());\r\n    diff = Math.ceil(diff / (1000 * 3600 * 24)); //밀리초 단위 변환\r\n \r\n    return diff;\r\n}\r\n\r\nexport default StartingDayInfo;","import React from 'react';\nimport WalkInfo from './info/WalkschoolInfo';\nimport SoccerInfo from './info/SoccerInfo';\nimport SchoolmealInfo from './info/SchoolmealInfo';\nimport MoriningcheckInfo from './info/MoriningCheckInfo';\nimport StartingDayInfo from './info/StartingdayInfo';\n\nclass App extends React.Component{\n  state = {\n    isLoading: true\n  };\n  componentDidMount(){\n    setTimeout(() => {\n      this.setState({ isLoading: false});\n    }, 2000);\n  }\n  render(){\n    const { isLoading } = this.state;\n  return (\n    <body class=\"body\">\n    <section class=\"container\">\n      {isLoading ? (\n        <div class=\"loader\"> {/*6초 로딩화면*/}\n          <span class=\"infotext\">Loading...</span> \n        </div>\n        ) : (\n          <div class=\"container wrapper\">\n            <textarea id=\"text\" type=\"text\" maxlength=\"50\"></textarea>\n            <h1>\n              <span class=\"segment innertext\">개학일로부터 지나온 시간 </span>\n              <span data-text=\"!\">|</span>\n            </h1>\n            <StartingDayInfo />\n            <br></br>\n            <WalkInfo />\n            <br></br>\n            <MoriningcheckInfo />\n            <br></br>\n            <SchoolmealInfo />\n            <br></br>\n            <SoccerInfo />\n          </div>\n        )\n      }\n    </section>\n    </body>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}