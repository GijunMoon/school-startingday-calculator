{"version":3,"sources":["components/Header.js","info/StartingdayInfo.js","info/TimeTextInfo.js","info/SoccerInfo.js","info/SchoolmealInfo.js","info/MoriningCheckInfo.js","info/WalkschoolInfo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","StartingDayInfo","currentDay","_date1","_date2","diffDate_1","Date","diffDate_2","getFullYear","getMonth","getDate","diff","Math","abs","getTime","ceil","dateDiff","TimeInfoText","class","SoccerInfo","soccerday","Number","SchoolmealInfo","exception_weekendDay","date1","date2","count","temp_date","console","log","tmp","getDay","setDate","calcDate","MoriningCheck","f_exception_weekendDay","WalkschoolInfo","walkday","walkkm","App","state","isLoading","setTimeout","setState","this","style","display","placeitems","textAlign","TimeTextInfo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97d18528.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n    <div className=\"Header\">\r\n        개학일 부터 지나온 시간 계산기\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction StartingDayInfo({currentDay}){\r\n    var a = '2020-03-02';\r\n    currentDay = dateDiff(a, new Date());\r\n    return(\r\n        <div className=\"startingdayinfo\">\r\n            <h3>우리는 3월 2일로 부터 {currentDay}일 만큼 지나왔습니다. </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction dateDiff(_date1, _date2) { /*날짜 간의 차이를 구하기 위한 함수*/\r\n    var diffDate_1 = _date1 instanceof Date ? _date1 :new Date(_date1); \r\n    var diffDate_2 = _date2 instanceof Date ? _date2 :new Date(_date2);\r\n \r\n    diffDate_1 =new Date(diffDate_1.getFullYear(), diffDate_1.getMonth()+1, diffDate_1.getDate());\r\n    diffDate_2 =new Date(diffDate_2.getFullYear(), diffDate_2.getMonth()+1, diffDate_2.getDate());\r\n \r\n    var diff = Math.abs(diffDate_2.getTime() - diffDate_1.getTime());\r\n    diff = Math.ceil(diff / (1000 * 3600 * 24)); //밀리초 단위 변환\r\n \r\n    return diff;\r\n}\r\n\r\nexport default StartingDayInfo;","import React from 'react';\r\n\r\nfunction TimeInfoText(){\r\n    return(\r\n        <div class=\"timeinfotext\">\r\n            <h4>이정도 시간을 아래처럼 사용했다면...</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimeInfoText;","import React from 'react';\r\n\r\nfunction SoccerInfo({soccerday}){\r\n    var a = '2020-03-02';\r\n    var t_soccerday = Number(dateDiff(a, new Date()));\r\n    soccerday = t_soccerday*16; //하루 1440분을 축구 90분으로 나누어 계산한 결과 값이 16\r\n    return(\r\n        <div className=\"soccerinfo\">\r\n            <span className=\"soccerinfo__text\">축구를 약 {soccerday}번 할 수 있었겠죠</span>\r\n            <br></br>\r\n            <span className=\"soccerinfo__infotext\">하루 24간 종일 90분 축구를 한다는 가정하입니다. (말도 안되는 계산이긴 합니다..)</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction dateDiff(_date1, _date2) { /*날짜 간의 차이를 구하기 위한 함수*/\r\n    var diffDate_1 = _date1 instanceof Date ? _date1 :new Date(_date1); \r\n    var diffDate_2 = _date2 instanceof Date ? _date2 :new Date(_date2);\r\n \r\n    diffDate_1 =new Date(diffDate_1.getFullYear(), diffDate_1.getMonth()+1, diffDate_1.getDate());\r\n    diffDate_2 =new Date(diffDate_2.getFullYear(), diffDate_2.getMonth()+1, diffDate_2.getDate());\r\n \r\n    var diff = Math.abs(diffDate_2.getTime() - diffDate_1.getTime());\r\n    diff = Math.ceil(diff / (1000 * 3600 * 24)); //밀리초 단위 변환\r\n \r\n    return diff;\r\n}\r\n\r\nexport default SoccerInfo;","import React from 'react';\r\nimport './css/infotext.css';\r\n\r\nfunction SchoolmealInfo(exception_weekendDay){\r\n    exception_weekendDay = calcDate();\r\n    return(\r\n        <div className=\"mealinfo\">\r\n            <span class=\"infotext\">급식을 {exception_weekendDay}번 먹을 수 있었겠죠</span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction calcDate() {\r\n    var date1 = new Date(2020, 3, 2); // 개학일\r\n    var date2 = new Date(); // 현재 날짜\r\n\r\n    var count = 0;\r\n    \r\n        while(true) {  \r\n            var temp_date = date1;\r\n        \r\n            if(temp_date.getTime() > date2.getTime()) {\r\n                console.log(\"count : \" + count);\r\n                break;\r\n            } else {\r\n                var tmp = temp_date.getDay();\r\n                if(tmp === 0 || tmp === 6) {\r\n                    // 주말\r\n                    //console.log(\"주말\");\r\n            } else {\r\n                // 평일\r\n                //console.log(\"평일\");\r\n                count++;         \r\n            }\r\n            temp_date.setDate(date1.getDate() + 1); \r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport default SchoolmealInfo;\r\n","import React from 'react';\r\n\r\nfunction MoriningCheck(exception_weekendDay){\r\n    exception_weekendDay = Number(calcDate());\r\n    var f_exception_weekendDay = exception_weekendDay*2\r\n    return(\r\n        <div className=\"schoolcheckinfo\">\r\n            <span className=\"schoolcheckinfo__text\">조례 및 종례를 {f_exception_weekendDay}번 했겠죠</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction calcDate() {\r\n    var date1 = new Date(2020, 3, 2); // 개학일\r\n    var date2 = new Date(); // 현재 날짜\r\n\r\n    var count = 0;\r\n    \r\n        while(true) {  \r\n            var temp_date = date1;\r\n        \r\n            if(temp_date.getTime() > date2.getTime()) {\r\n                console.log(\"count : \" + count);\r\n                break;\r\n            } else {\r\n                var tmp = temp_date.getDay();\r\n                if(tmp === 0 || tmp === 6) {\r\n                    // 주말\r\n                    //console.log(\"주말\");\r\n            } else {\r\n                // 평일\r\n                //console.log(\"평일\");\r\n                count++;         \r\n            }\r\n            temp_date.setDate(date1.getDate() + 1); \r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport default MoriningCheck;","import React from 'react';\r\n\r\nfunction WalkschoolInfo(walkday){\r\n    walkday = Number(calcDate());\r\n    //1.28km\r\n    var walkkm = walkday * 1.28;\r\n    return(\r\n        <div className=\"walkinfo\">\r\n            <span className=\"walkinfo__text\">지금까지 최소 {walkkm}km 만큼은 걷거나 차를 탔을 겁니다.</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction calcDate() {\r\n    var date1 = new Date(2020, 3, 2); // 개학일\r\n    var date2 = new Date(); // 현재 날짜\r\n\r\n    var count = 0;\r\n    \r\n        while(true) {  \r\n            var temp_date = date1;\r\n        \r\n            if(temp_date.getTime() > date2.getTime()) {\r\n                console.log(\"count : \" + count);\r\n                break;\r\n            } else {\r\n                var tmp = temp_date.getDay();\r\n                if(tmp === 0 || tmp === 6) {\r\n                    // 주말\r\n                    //console.log(\"주말\");\r\n            } else {\r\n                // 평일\r\n                //console.log(\"평일\");\r\n                count++;         \r\n            }\r\n            temp_date.setDate(date1.getDate() + 1); \r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nexport default WalkschoolInfo;","import React from 'react';\nimport './App.css';\nimport { Header } from './components';\nimport StartingDayInfo from './info/StartingdayInfo';\nimport TimeTextInfo from './info/TimeTextInfo';\nimport SoccerInfo from './info/SoccerInfo';\nimport SchoolmealInfo from './info/SchoolmealInfo';\nimport SchoolCheckInfo from './info/MoriningCheckInfo';\nimport WalkInfo from './info/WalkschoolInfo';\n\nclass App extends React.Component{\n  state = {\n    isLoading: true\n  };\n  componentDidMount(){\n    setTimeout(() => {\n      this.setState({ isLoading: false});\n    }, 2000);\n  }\n  render(){\n    const { isLoading } = this.state;\n  return (\n    <section class=\"container\">\n      {isLoading ? (\n        <div class=\"loader\"> {/*6초 로딩화면*/}\n          <span class=\"loader__text\">Loading...</span> \n        </div>\n        ) : (\n          <div class=\"calculator\">{/*메인 시간 계산기 부분*/}\n            <Header/>\n            <div \n            style={{\n              display: \"grid\",\n              placeitems: \"center\",\n              textAlign: \"center\"\n            }} \n            className=\"des\">\n              <StartingDayInfo /> {/*지나온 시간 출력*/}\n              <TimeTextInfo />\n              <SoccerInfo />\n              <SchoolmealInfo />\n              <SchoolCheckInfo />\n              <WalkInfo />\n            </div>\n          </div>\n        )\n      }\n    </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}